using FairPos.Epylion.Service;
using FairPos.Epylion.Service.Setups;
using FairPos.Epylion.WebApi.Vs19.JWT;
using FairPos.Epyllion.Repository;
using FairPos.Epyllion.Repository.Setups;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Serialization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FairPos.Epylion.WebApi.Vs19
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            services.AddCors();
            //services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_3_0).AddJsonOptions(options => options.JsonSerializerOptions.PropertyNameCaseInsensitive = new DefaultContractResolver());

            services.AddControllers().AddJsonOptions(option =>
            {
                option.JsonSerializerOptions.PropertyNameCaseInsensitive = true;
                option.JsonSerializerOptions.PropertyNamingPolicy = null;
            });

            services.AddAuthorization(options =>
            {
                //options.AddPolicy(nameof(Policy.Account),
                //                  policy => policy.Requirements.Add(new AccountRequirement()));

                options.AddPolicy(nameof(Policy.Account), policy =>
                  policy.RequireRole(GlobalFunction.SystemRole
                  ).AddRequirements(new AccountRequirement()));
            });
            services.AddSingleton<IAuthorizationHandler, AccountHandler>();

            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "FairPos.Epylion.WebApi.Vs19", Version = "v1" });
            });


            var jwtTokenConfig = Configuration.GetSection("jwtTokenConfig").Get<JwtTokenConfig>();
            services.AddSingleton(jwtTokenConfig);
            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = true;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidIssuer = jwtTokenConfig.Issuer,
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(jwtTokenConfig.Secret)),
                    ValidAudience = jwtTokenConfig.Audience,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ClockSkew = TimeSpan.FromMinutes(1)
                };
            });
            services.AddSingleton<IJwtAuthManager, JwtAuthManager>();
            services.AddHostedService<JwtRefreshTokenCache>();
            services.AddScoped<IDBConnectionProvider, DBConnectionProvider>();

            //services dependancy injection
            #region services dependancy injection
            services.AddScoped<IUsersWebService, UsersWebService>();
            services.AddScoped<IMenuService, MenuService>();
            services.AddScoped<IShopListService, ShopListService>();
            services.AddScoped<IProductService, ProductService>();
            services.AddScoped<ISupplierService, SupplierService>();

            #endregion

            //repository dependancy injection
            #region repository dependancy injection
            services.AddScoped<IUsersWebRepository, UsersWebRepository>();
            services.AddScoped<IMenuRepository, MenuRepository>();
            services.AddScoped<IShopListRepository, ShopListRepository>();
            services.AddScoped<IProductRepository, ProductRepository>();
            services.AddScoped<ISupplierRepository, SupplierRepository>();
            services.AddScoped<IMeasureUnitRepository, MeasureUnitRepository>();
            #endregion

            IDBConnectionProvider dBConnectionProvider =new DBConnectionProvider();
            dBConnectionProvider.SetDbConnectionString(Configuration.GetConnectionString("DefaultConnection"));




        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                
            }

            app.UseSwagger();
            app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "FairPos.Epylion.WebApi.Vs19 v1"));

            app.UseHttpsRedirection();

            app.UseRouting();
          

            // global cors policy
            app.UseCors(x => x
                .AllowAnyMethod()
                .AllowAnyHeader()
                .SetIsOriginAllowed(origin => true) // allow any origin
                .AllowCredentials()); // allow credentials

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
