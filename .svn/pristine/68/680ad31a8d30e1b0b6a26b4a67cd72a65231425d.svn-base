using FairPos.Epylion.Models.Operations;
using FairPos.Epylion.Models.Setups;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FairPos.Epyllion.Repository.Operations
{
    /////////////////////////////////////////////////////////////////////////////////
    //FileName: IPurchaseOrderRepository.cs
    //FileType: C# Source file
    //Author : SHUVO
    //Created On : 10/10/2021
    //Last Modified On : 
    //Copy Rights : MediaSoft Data System LTD
    //Description : Interface and Class for defining database related functions
    /////////////////////////////////////////////////////////////////////////////////
    public interface IPurchaseOrderRepository
    {
        bool Insert(BuyOrderTemp model);
        bool PurchaseOrder(List<BuyOrderTemp> model);
        bool RemoveBuyOrderTemp(BuyOrderTemp model);
        bool RemoveBuyOrderTempByID(string barCode);
        decimal GetStockBySbarocde(string sBarcode);
        List<BuyOrderTemp> GetBuyOrderTemps(string UserID);
    }

    public class PurchaseOrderRepository : BaseRepository, IPurchaseOrderRepository
    {
        public PurchaseOrderRepository(IDBConnectionProvider dBConnectionProvider) : base(dBConnectionProvider)
        {
            baseQuery = @"SELECT [CmpIDX]
                              ,[Chln]
                              ,[SupID]
                              ,[sBarCode]
                              ,[BarCode]
                              ,[BoxQty]
                              ,[Qty]
                              ,[sQty]
                              ,[DiscPrcnt]
                              ,[VATPrcnt]
                              ,[PrdComm]
                              ,[CPU]
                              ,[RPU]
                              ,[BuyDT]
                              ,[EXPDT]
                              ,[UserID]
                              ,[PrdDescription]
                              ,[BoxUOM]
                              ,[UnitUOM]
                              ,[DeliveryDate]
                              ,[PrdID]
                              ,[POPackQty]
                              ,[PackUOM]
                        ,CASE WHEN (ROW_NUMBER() OVER (ORDER BY CmpIDX)  =1)
	                     THEN	(SELECT COUNT(*) FROM BuyOrderTemp) 
	                     ELSE 0 END RecordCount
                    from BuyOrderTemp";
        }
        public bool PurchaseOrder(List<BuyOrderTemp> model)
        {
            string chln = GetMaxIdWithPrfix2("Chln", "4", "0001", "BuyOrder", "PO/" + DateTime.Now.Year.ToString() + "/" + "KK" + "/");//KK is static
            foreach(var d in model)
            {
                BuyOrder sts = new();
                sts.BarCode = d.BarCode;
                sts.sBarCode = d.sBarCode;
                sts.Chln = chln;
                sts.CmpIDX = sts.Chln + sts.BarCode + d.DeliveryDate.ToShortDateString();
                sts.CPU = d.CPU;
                sts.Qty = d.Qty;
                sts.BoxQty = d.BoxQty;
                sts.POPackQty = d.POPackQty;
                sts.BuyDT = d.BuyDT;
                sts.EXPDT = d.DeliveryDate;//conf
                sts.RPU = d.RPU;
                sts.SupID = d.SupID;
                sts.PrdComm = d.PrdComm;
                sts.DiscPrcnt = d.DiscPrcnt;
                sts.VATPrcnt = 0;
                sts.sQty = d.sQty;
                sts.SupID = d.SupID;
                sts.UserID = d.UserID;
                sts.IS_ARRIVAL = false;
                sts.IS_CANCEL = false;
                sts.VatAmt = 0;
                sts.QutRefNo = d.QtrefNo;
                sts.PartialDelivery = d.PartialDelivery;
                sts.MaturtyDays = d.MaturityDaysID.ToString();
                sts.PaymentTerms = d.PaymentTermName;
                _dal.Insert<BuyOrder>(sts, "", "", "", ref msg);

            }
            bool rersponse =_dal.Delete<BuyOrderTemp>(model.FirstOrDefault(), "UserID", "", ref msg);
            return rersponse;
        }
        public bool Insert(BuyOrderTemp model)
        {
            if (model.isAdd == true && model.isEdit == false)
            {
                string chln = GetMaxIdWithPrfix2("RequisitionNo", "000000", "000001", "BuyRequisition", "HM13");//shopid HM13 from seaasion also userid from session
                model.Chln = chln;
                model.CmpIDX = chln +model.BarCode+ model.DeliveryDate;
                model.BoxQty = model.Qty / model.BoxSize;
                model.BuyDT = DateTime.Now.Date;
                model.EXPDT = DateTime.Now.Date.AddMonths(2); //model.EXPDT;//conf
                                          //model.UserID = session theke asbe
                model.BoxUOM = model.PackUOM;
                model.PrdComm = 0;
                model.VATPrcnt = 0;
                model.DiscPrcnt = 0;
                model.sQty = 0;

                bool response = _dal.Insert<BuyOrderTemp>(model, "", "", "", ref msg);

                if (!string.IsNullOrEmpty(msg))
                    throw new Exception(msg);

                return response;
            }
            else
            {
                query = baseQuery + $" where BarCode ='{model.BarCode}' AND sBarCode ='{model.sBarCode}' ";
                var obj = _dal.SelectFirstOrDefault<BuyOrderTemp>(query, ref msg);
                bool response = _dal.Delete<BuyOrderTemp>(obj, "BarCode,sBarCode", "", ref msg);
                if (response)
                {
                    string chln = GetMaxIdWithPrfix2("RequisitionNo", "000000", "000001", "BuyRequisition", "HM13");//shopid HM13 from seaasion also userid from session
                    model.Chln = chln;
                    model.CmpIDX = chln + model.BarCode + model.DeliveryDate;
                    model.BoxQty = model.Qty / model.BoxSize;
                    model.BuyDT = DateTime.Now.Date;
                    model.EXPDT = DateTime.Now.Date.AddMonths(2);//conf
                                              //model.UserID = session theke asbe
                    model.BoxUOM = model.PackUOM;
                    model.PrdComm = 0;
                    model.VATPrcnt = 0;
                    model.DiscPrcnt = 0;
                    model.sQty = 0;

                    bool res = _dal.Insert<BuyOrderTemp>(model, "", "", "", ref msg);

                    if (!string.IsNullOrEmpty(msg))
                        throw new Exception(msg);

                    return res;
                }
                return response;
            }
        }

        public List<BuyOrderTemp> GetBuyOrderTemps(string UserID)
        {
            query = baseQuery + $" where UserID='{UserID}'";
            var response = _dal.Select<BuyOrderTemp>(query, ref msg).ToList();
            return response;
        }
        public bool RemoveBuyOrderTemp(BuyOrderTemp model)
        {
            query = baseQuery + $" where UserID='{model.UserID}' AND BarCode='{model.BarCode}' ";
            var obj = _dal.SelectFirstOrDefault<BuyOrderTemp>(query, ref msg);
            if (obj == null)
            {
                return false;
            }
            bool response = _dal.Delete<BuyOrderTemp>(obj, "SupID", "", ref msg);
            return response;
        }
        public decimal GetStockBySbarocde(string sBarcode)
        {
            decimal sum = 0;
            string query = "select balQty from buy where sBarCode='" + sBarcode + "'";
            var response = _dal.Select<Buy>(query, ref msg).ToList();
            sum = Convert.ToDecimal(response.Sum(m => m.balQty).ToString());
            return sum;
        }
        public bool RemoveBuyOrderTempByID(string barCode)
        {
            query = baseQuery + $" where BarCode='{barCode}' ";
            var obj = _dal.SelectFirstOrDefault<BuyOrderTemp>(query, ref msg);
            if (obj == null)
            {
                return false;
            }
            bool response = _dal.Delete<BuyOrderTemp>(obj, "BarCode", "", ref msg);
            return response;
        }
    }
}
