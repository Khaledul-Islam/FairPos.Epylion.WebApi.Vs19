using FairPos.Epylion.Models;
using FairPos.Epylion.Models.Setups;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FairPos.Epyllion.Repository.Setups
{
    /////////////////////////////////////////////////////////////////////////////////
    //FileName: ItemListRepository.cs
    //FileType: C# Source file
    //Author : SHUVO
    //Created On : 15/09/2021
    //Last Modified On : 
    //Copy Rights : MediaSoft Data System LTD
    //Description : Interface and Class for defining database related functions
    /////////////////////////////////////////////////////////////////////////////////
    public interface IItemListRepository
    {
        bool Insert(StyleSize model);
        bool Update(StyleSize model);
        bool Delete(StyleSize model);
        List<StyleSize> SelectAll();
        StyleSize FindBySBarocde(string sbarocde);
        List<StyleSize> GetsForDataTables(int start, int length, string orderBy, ref string msgs, string searchText = null);
        bool IsDataExist(StyleSize model);
    }
    public class ItemListRepository : BaseRepository, IItemListRepository
    {
        public ItemListRepository(IDBConnectionProvider dBConnectionProvider) : base(dBConnectionProvider)
        {

            baseQuery = @"SELECT [CMPIDX]
                              ,[sBarcode]
                              ,[Barcode]
                              ,[PrdID]
                              ,[ItemName]
                              ,[ItemNameBangla]
                              ,[DiscPrcnt]
                              ,[VATPrcnt]
                              ,[PrdComm]
                              ,[CPU]
                              ,[RPU]
                              ,[RPP]
                              ,[WSP]
                              ,[WSQ]
                              ,[DisContinued]
                              ,[SupID]
                              ,[UserID]
                              ,[ENTRYDT]
                              ,[ZoneID]
                              ,[Point]
                              ,[Reorder]
                              ,[MaxOrder]
                              ,[UOMId]
                              ,[ExpireLimit]
                              ,[AutoSale]
                              ,[BoxSize]
                              ,[BoxUOMId]
                              ,[IsConverationItem]
                              ,[MinOrder]
                              ,[ArrivalExpireLimit]
                              ,[POPackSize]
                              ,[PackUOMId]
                              ,[ItemWeight]
                              ,[IsEssentialItem]
                              ,[PrdName]
                              ,[UOMName]
                              ,[PackUiomName]
                              ,[BOXUOMName]
                              ,[Supname]
                              ,[balQty]
                              ,[ItemFullName],
                    CASE WHEN (ROW_NUMBER() OVER (ORDER BY CMPIDX)  =1)
	                                         THEN	(SELECT COUNT(*) FROM vStyleSize) 
	                                         ELSE 0 END RecordCount
                                      FROM [vStyleSize]";
        }
        public bool Delete(StyleSize model)
        {
            bool response = _dal.Delete<StyleSize>(model, "CMPIDX", "", ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public StyleSize FindBySBarocde(string sbarocde)
        {
            var query = baseQuery + " where sBarcode='" + sbarocde + "'";
            var data = _dal.Select<StyleSize>(query, ref msg).FirstOrDefault();

            if (data.IsConverationItem)
            {
                string sscQuery = "select * from StyleSizeCoversition where MainSBarcode='" + sbarocde + "'";
                var converstionList = _dal.Select<StyleSizeCoversition>(sscQuery, ref msg).ToList();

                List<StyleSize> lstStyleSize = new List<StyleSize>();              

                foreach (var item in converstionList)
                {
                    string squery = baseQuery + " where sBarcode='" + item.sBarcode + "'";
                    StyleSize oStyleSize = new StyleSize();
                    oStyleSize = _dal.Select<StyleSize>(squery, ref msg).FirstOrDefault();
                    lstStyleSize.Add(oStyleSize);
                }
                data.itemsConvert = lstStyleSize;
                
            }
            List<StyleSize> ObjlstStyleSize = new List<StyleSize>();
            string itemListquery = baseQuery + " where SupID='" + data.SupID + "' and PrdID='"+data.PrdID+"'";
            var ObjItemList = _dal.Select<StyleSize>(itemListquery, ref msg).ToList();
            data.itemsList = ObjItemList;
            return data;
        }

        public List<StyleSize> GetsForDataTables(int start, int length, string orderBy, ref string msgs, string searchText = null)
        {
            whereCluase = "";
            if (!string.IsNullOrEmpty(searchText))
            {
                whereCluase = " where CMPIDX like '%" + searchText + @"%' or ItemName like '%" + searchText + @"%'  
                       " + orderBy + "  OFFSET " + start + " ROWS FETCH NEXT " + length + " ROWS ONLY";
            }
            else
            {
                whereCluase = orderBy + "  OFFSET " + start + " ROWS FETCH NEXT " + length + " ROWS ONLY";
            }

            query = string.Format("{0} {1}", baseQuery, whereCluase);
            var data = _dal.Select<StyleSize>(query, ref msg);

            #region filter data count
            whereCluase = "";
            if (!string.IsNullOrEmpty(searchText))
            {
                whereCluase = " where CMPIDX like '%" + searchText + @"%' or ItemName like '%" + searchText + @"%' ";
            }
            else
            {
                whereCluase = "  ";
            }

            query = " SELECT COUNT(*) FROM [StyleSize] " + whereCluase;
            var count = _dal.SelectFirstColumn(query, ref msg);
            if (data != null && data.Count > 0)
            {
                int _count;
                int.TryParse(count, out _count);
                data[0].RecordFilter = _count;
            }
            #endregion

            msgs = msg;
            return data;
        }

        public bool Insert(StyleSize model)
        {
            model.CMPIDX = GetMaxId("CMPIDX", "StyleSize");

            bool response = _dal.Insert<StyleSize>(model, "", "", "", ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public bool IsDataExist(StyleSize model)
        {
            query = baseQuery + $" where (CMPIDX<>'{model.CMPIDX}' and '{model.CMPIDX}' <>'' ) and (ItemName='{model.ItemName}' ) ";
            var response = _dal.SelectFirstOrDefault<StyleSize>(query, ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            if (response == null)
                return false;
            return true;
        }

        public List<StyleSize> SelectAll()
        {
            query = baseQuery;
            var response = _dal.Select<StyleSize>(query, ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public bool Update(StyleSize model)
        {
            bool response = false;


            response = _dal.Update<StyleSize>(model, "", "CMPIDX", "", ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }
    }
}
