using FairPos.Epylion.Models.Operations;
using FairPos.Epylion.Models.Setups;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FairPos.Epyllion.Repository.Operations
{
    public interface IInventoryRepository
    {
        Buy GetByBarcodeExpForInventory(string barcode);
        bool RemoveTempInventory(TempInventory model);
        List<TempInventory> GetsTempInventory(string name);
    }

    public class InventoryRepository : BaseRepository, IInventoryRepository
    {
        public InventoryRepository(IDBConnectionProvider dBConnectionProvider) : base(dBConnectionProvider)
        {

        }
        public Buy GetByBarcodeExpForInventory(string barcode)
        {
            string query = @"SP_GetByBarcodeExp2 '" + barcode + "' ";
            var result = _dal.Select<SupportBuy>(query, ref msg).FirstOrDefault();
            if (result == null)
            {
                return null;
            }
            Buy buy = new ();
            buy.balQty = result.BalQty;
            buy.BarCode = result.Barcode;
            buy.sBarCode = result.sBarcode;
            buy.PrdID = result.PrdID;
            buy.PrdName = result.PrdName;
            buy.SupID = result.SupID;
            buy.SupName = result.Supname;
            buy.UOMName = result.UOMName;
            buy.ProductDescription = result.ItemFullName;
            buy.ProductDescriptionBangla = result.ItemFullNameBangla;
            buy.RPU = result.RPU;
            buy.CPU = result.CPU;
            buy.VATPrcnt = result.VATPrcnt;
            buy.EXPDT = result.EXPDT;
            buy.BoxUOMName = result.BoxUOMName;
            buy.BoxSize = result.BoxSize;
            buy.IsConversionItem = result.IsConverationItem;
            buy.SaleBalQty = result.SO_Pending;

            return buy;
        }

        public List<TempInventory> GetsTempInventory(string name)
        {
            if (string.IsNullOrEmpty(name))
            {
                string query = "select * from TempInventory";
                var data = _dal.Select<TempInventory>(query, ref msg);
                return data;
            }
            else
            {
                string query = "select * from TempInventory where CREATE_BY ='"+name+"'";
                var data = _dal.Select<TempInventory>(query, ref msg);
                return data;
            }
        }

        public bool RemoveTempInventory(TempInventory model)
        {
            var response = _dal.Delete<TempInventory>(model, "BarCode,CREATE_BY", "", ref msg);
            if(response==false|| !string.IsNullOrEmpty(msg))
            {
                return false;
            }
            return response;
        }
    }
}
