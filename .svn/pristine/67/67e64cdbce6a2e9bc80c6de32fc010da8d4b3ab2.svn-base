using FairPos.Epylion.Service;
using FairPos.Epylion.Service.Setups;
using FairPos.Epylion.WebApi.Vs19.JWT;
using FairPos.Epyllion.Repository;
using FairPos.Epyllion.Repository.Setups;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FairPos.Epylion.WebApi.Vs19.Extension
{
    public static class ServiceExtension
    {
        public static void ConfigureRepositoryWrapper(this IServiceCollection services) //calling repositories
        {
            services.AddSingleton<IAuthorizationHandler, AccountHandler>();
            services.AddSingleton<IJwtAuthManager, JwtAuthManager>();
            services.AddHostedService<JwtRefreshTokenCache>();
            services.AddScoped<IDBConnectionProvider, DBConnectionProvider>();

            services.AddScoped<IUsersWebService, UsersWebService>();
            services.AddScoped<IUsersWebRepository, UsersWebRepository>();
            services.AddScoped<IMenuService, MenuService>();
            services.AddScoped<IMenuRepository, MenuRepository>();
            services.AddScoped<IShopListService, ShopListService>();
            services.AddScoped<IShopListRepository, ShopListRepository>();
            services.AddScoped<IProductService, ProductService>();
            services.AddScoped<IProductRepository, ProductRepository>();
            services.AddScoped<ISupplierService, SupplierService>();
            services.AddScoped<ISupplierRepository, SupplierRepository>();
            services.AddScoped<IEmployeeService, EmployeeService>();
            services.AddScoped<IMeasureUnitRepository, MeasureUnitRepository>();
            services.AddScoped<IMeasureUnitService, MeasureUnitService>();
            services.AddScoped<IEmployeeRepository, EmployeeRepository>();

        }
        public static void ConfigureDatabaseContext(this IServiceCollection services, IConfiguration config)//for passing database credentials
        {
            IDBConnectionProvider dBConnectionProvider = new DBConnectionProvider();
            dBConnectionProvider.SetDbConnectionString(config.GetConnectionString("DefaultConnection"));
        }
        public static void ConnfigControllers(this IServiceCollection services)
        {

            services.AddControllers().AddJsonOptions(option =>
            {
                option.JsonSerializerOptions.PropertyNameCaseInsensitive = true;
                option.JsonSerializerOptions.PropertyNamingPolicy = null;
            });
        }

        public static void AuthorizationWrapper(this IServiceCollection services)
        {
            services.AddAuthorization(options =>
            {
                //options.AddPolicy(nameof(Policy.Account),
                //                  policy => policy.Requirements.Add(new AccountRequirement()));

                options.AddPolicy(nameof(Policy.Account), policy =>
                  policy.RequireRole(GlobalFunction.SystemRole
                  ).AddRequirements(new AccountRequirement()));
            });
        }
        public static void ConfigureSwagger(this IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "FairPos.Epylion.WebApi.Vs19", Version = "v1" });
                c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    Description =
                    "JWT Authorization header using the Bearer scheme. \r\n\r\n " +
                    "Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\n" +
                    "Example: \"Bearer 12345abcdef\"",
                    Name = "Authorization",
                    In = ParameterLocation.Header,
                    Type = SecuritySchemeType.ApiKey,
                    Scheme = "Bearer"
                });
                c.AddSecurityRequirement(new OpenApiSecurityRequirement()
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            },
                            Scheme = "oauth2",
                            Name = "Bearer",
                            In = ParameterLocation.Header,

                        },
                        new List<string>()
                    }
                });
            });
        }

        public static void ConfigureJWTBearer(this IServiceCollection services, IConfiguration Configuration) // for jwt bearer
        {
            var jwtTokenConfig = Configuration.GetSection("jwtTokenConfig").Get<JwtTokenConfig>();

            services.AddSingleton(jwtTokenConfig);

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = true;
                x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidIssuer = jwtTokenConfig.Issuer,
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(jwtTokenConfig.Secret)),
                    ValidAudience = jwtTokenConfig.Audience,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ClockSkew = TimeSpan.FromMinutes(1)
                };
            });
        }
    }
}
