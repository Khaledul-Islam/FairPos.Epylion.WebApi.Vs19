using FairPos.Epylion.Models.Setups;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FairPos.Epyllion.Repository.Setups
{
    /////////////////////////////////////////////////////////////////////////////////
    //FileName: ItemListRepository.cs
    //FileType: C# Source file
    //Author : SHUVO
    //Created On : 15/09/2021
    //Last Modified On : 
    //Copy Rights : MediaSoft Data System LTD
    //Description : Interface and Class for defining database related functions
    /////////////////////////////////////////////////////////////////////////////////
    public interface IItemListRepository
    {
        bool Insert(StyleSize model);
        bool Update(StyleSize model);
        bool Delete(StyleSize model);
        List<StyleSize> SelectAll();
        StyleSize FindById(string id);
        List<StyleSize> GetsForDataTables(int start, int length, string orderBy, ref string msgs, string searchText = null);
        bool IsDataExist(StyleSize model);
    }
    public class ItemListRepository : BaseRepository, IItemListRepository
    {
        public ItemListRepository(IDBConnectionProvider dBConnectionProvider) : base(dBConnectionProvider)
        {
            
            baseQuery = @"SELECT        dbo.StyleSize.CMPIDX, dbo.StyleSize.sBarcode, dbo.StyleSize.Barcode, dbo.StyleSize.PrdID, dbo.StyleSize.ItemName, dbo.StyleSize.ItemNameBangla, dbo.StyleSize.DiscPrcnt, dbo.StyleSize.VATPrcnt, 
                         dbo.StyleSize.PrdComm, dbo.StyleSize.CPU, dbo.StyleSize.RPU, dbo.StyleSize.RPP, dbo.StyleSize.WSP, dbo.StyleSize.WSQ, dbo.StyleSize.DisContinued, dbo.StyleSize.SupID, dbo.StyleSize.SupName, dbo.StyleSize.UserID, 
                         dbo.StyleSize.ENTRYDT, dbo.StyleSize.ZoneID, dbo.StyleSize.Point, dbo.StyleSize.Reorder, dbo.StyleSize.MaxOrder, dbo.StyleSize.UOMId, dbo.StyleSize.ExpireLimit, dbo.StyleSize.AutoSale, dbo.StyleSize.BoxSize, 
                         dbo.StyleSize.BoxUOMId, dbo.StyleSize.IsConverationItem, dbo.StyleSize.MinOrder, dbo.StyleSize.ArrivalExpireLimit, dbo.StyleSize.POPackSize, dbo.StyleSize.PackUOMId, dbo.StyleSize.ItemWeight, 
                         dbo.StyleSize.IsEssentialItem, dbo.Product.PrdName, dbo.MeasureUnit.UOMName, m2.UOMName AS PackUiomName, m1.UOMName AS BOXUOMName, dbo.Supplier.Supname AS Expr1, dbo.Buy.sBarCode AS Expr2
                         
                         FROM            dbo.StyleSize LEFT OUTER JOIN
                         dbo.MeasureUnit ON dbo.StyleSize.UOMId = dbo.MeasureUnit.UOMId LEFT OUTER JOIN
                         dbo.Supplier ON dbo.StyleSize.SupID = dbo.Supplier.SupID LEFT OUTER JOIN
                         dbo.MeasureUnit AS m1 ON dbo.StyleSize.BoxUOMId = m1.UOMId LEFT OUTER JOIN
                         dbo.MeasureUnit AS m2 ON dbo.StyleSize.PackUOMId = m2.UOMId LEFT OUTER JOIN
                         dbo.Product ON dbo.StyleSize.PrdID = dbo.Product.PrdID LEFT OUTER JOIN
                         dbo.Buy ON dbo.StyleSize.CMPIDX = dbo.Buy.CMPIDX";
        }
        public bool Delete(StyleSize model)
        {
            bool response = _dal.Delete<StyleSize>(model, "CMPIDX", "", ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public StyleSize FindById(string id)
        {
            query = baseQuery + $" where CMPIDX='{id}' ";
            var response = _dal.SelectFirstOrDefault<StyleSize>(query, ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public List<StyleSize> GetsForDataTables(int start, int length, string orderBy, ref string msgs, string searchText = null)
        {
            whereCluase = "";
            if (!string.IsNullOrEmpty(searchText))
            {
                whereCluase = " where CMPIDX like '%" + searchText + @"%' or ItemName like '%" + searchText + @"%'  
                       " + orderBy + "  OFFSET " + start + " ROWS FETCH NEXT " + length + " ROWS ONLY";
            }
            else
            {
                whereCluase = orderBy + "  OFFSET " + start + " ROWS FETCH NEXT " + length + " ROWS ONLY";
            }

            query = string.Format("{0} {1}", baseQuery, whereCluase);
            var data = _dal.Select<StyleSize>(query, ref msg);

            #region filter data count
            whereCluase = "";
            if (!string.IsNullOrEmpty(searchText))
            {
                whereCluase = " where CMPIDX like '%" + searchText + @"%' or ItemName like '%" + searchText + @"%' ";
            }
            else
            {
                whereCluase = "  ";
            }

            query = " SELECT COUNT(*) FROM [StyleSize] " + whereCluase;
            var count = _dal.SelectFirstColumn(query, ref msg);
            if (data != null && data.Count > 0)
            {
                int _count;
                int.TryParse(count, out _count);
                data[0].RecordFilter = _count;
            }
            #endregion

            msgs = msg;
            return data;
        }

        public bool Insert(StyleSize model)
        {
            model.CMPIDX = GetMaxId("CMPIDX", "StyleSize");

            bool response = _dal.Insert<StyleSize>(model, "", "", "", ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public bool IsDataExist(StyleSize model)
        {
            query = baseQuery + $" where (CMPIDX<>'{model.CMPIDX}' and '{model.CMPIDX}' <>'' ) and (ItemName='{model.ItemName}' ) ";
            var response = _dal.SelectFirstOrDefault<StyleSize>(query, ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            if (response == null)
                return false;
            return true;
        }

        public List<StyleSize> SelectAll()
        {
            query = baseQuery;
            var response = _dal.Select<StyleSize>(query, ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }

        public bool Update(StyleSize model)
        {
            bool response = false;


            response = _dal.Update<StyleSize>(model, "", "CMPIDX", "", ref msg);

            if (!string.IsNullOrEmpty(msg))
                throw new Exception(msg);

            return response;
        }
    }
}
